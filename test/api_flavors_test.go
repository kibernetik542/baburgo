/*
Taikun - WebApi

Testing FlavorsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/kibernetik542/baburgo"
)

func Test_openapi_FlavorsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlavorsApiService FlavorsAwsInstanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsAwsInstanceTypes(context.Background(), cloudId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsAzureVmSizes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsAzureVmSizes(context.Background(), cloudId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsBindToProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.FlavorsApi.FlavorsBindToProject(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsDropdownFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsDropdownFlavors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsGoogleMachineTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsGoogleMachineTypes(context.Background(), cloudId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsOpenstackFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsOpenstackFlavors(context.Background(), cloudId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsProxmoxFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsProxmoxFlavors(context.Background(), cloudId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsSelectedFlavorsForProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsSelectedFlavorsForProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsTanzuFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsTanzuFlavors(context.Background(), cloudId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsUnbindFromProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.FlavorsApi.FlavorsUnbindFromProject(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
